{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>This is an example site to demo using mkdocs-macros-plugin with YAML to generate content.</p> <p>mkdocs-macros-plugin allows you to use variables and macros in your MkDocs sites. It's a powerful tool, and I recommend reading the mkdocs-macros documentation to learn more about it.</p> <p>This site focuses on one task: using YAML to define variables that you can then use in your site. This can range from pulling in something from your <code>mkdocs.yml</code> and displaying it in your content, to using extra YAML files to generate page contents.</p> <p>There's a lot more to this plugin</p> <p>This collection of examples focuses on YAML format sources, and how to display them. The plugin allows for a lot more than just using YAML as a source format. It includes built-in access to things like the system environment, and support for creating your own modules and pluglets.</p>"},{"location":"clashing-code/","title":"Avoid clashing with code examples","text":"<p>If your content contains code examples with syntax similar to Jinja2, the plugin may try and parse them as macros. This is discussed in detail in the plugin documentation: How to prevent accidental interpretation of \"Jinja-like\" statements?.</p> <p>Note that this behaviour is intentional: the plugin ignores the usual code fences (backticks) so that it can support use cases where the content of code blocks is computed on the fly.</p> <p>The documentation suggests four possible solutions. For this example site, I have chosen Solution 3: Explicitly marking the snippets as 'raw' . If you are adding the plugin to an existing site and don't want to edit your code examples, consider Solution 4: Altering the syntax of Jinja2 for mkdocs-macros.</p>"},{"location":"clone-run/","title":"Run the examples locally","text":"<p>You need:</p> <ul> <li>Python 3.7 or above.</li> <li>git</li> </ul> <pre><code>git clone https://github.com/StarfallProjects/mkdocs-macros-yaml-examples.git\ncd mkdocs-macros-yaml-examples\n# Create a virtual environment https://docs.python.org/3/library/venv.html\npython -m venv venv\n# Active your virtual environment\n./venv/Scripts/&lt;script-for-your-system&gt;\n# Install requirements\npip install -r requirements.txt\n# Build and serve locally\nmkdocs serve\n</code></pre>"},{"location":"external-yaml-files/","title":"External YAML files","text":"<p>Including external YAML files is where this feature becomes really powerful:</p> <ul> <li>Allows you to create large YAML sources, without cluttering up your <code>mkdocs.yml</code>.</li> <li>Creates the possibility of single-sourcing content: for example, you could have a YAML file containing help text that you then display both in-app and in your docs.</li> <li>And intriguing possibilities for rendering OpenAPI spec files . . . </li> </ul> <p>The plugin docs have more information on Including external yaml files.</p>"},{"location":"external-yaml-files/#example-include-a-yaml-file-from-your-project","title":"Example: Include a YAML file from your project","text":""},{"location":"external-yaml-files/#code","title":"Code","text":"<pre><code># In mkdocs.yml\nplugins:\n- macros:\ninclude_yaml:\n- _yaml/simple-example.yml\n# In _yaml/simple-example.yml\nsimpleYamlOne: 1\nsimpleYamlTwo: two\n# In your Markdown\n* Simple YAML 1: {{ simpleYamlOne }}\n* Simple YAML 2: {{ simpleYamlTwo }}\n</code></pre>"},{"location":"external-yaml-files/#output","title":"Output","text":"<ul> <li>Simple YAML 1: 1</li> <li>Simple YAML 2: two</li> </ul>"},{"location":"external-yaml-files/#example-include-a-yaml-file-from-an-external-url","title":"Example: Include a YAML file from an external URL","text":"<p>Wouldn't it be cool to be able to pull in a YAML file from outside the project? Yes. Can you do it? No / not easily (I'm exploring using modules for it).</p>"},{"location":"frontmatter/","title":"Frontmatter","text":"<p>How to include YAML frontmatter in your Markdown in an MkDocs site.</p> <p>Relevant plugin docs</p> <p>List of tags:</p> <ul> <li> <p>mkdocs</p> </li> <li> <p>jinja2</p> </li> <li> <p>examples</p> </li> </ul>","tags":["mkdocs","jinja2","examples"]},{"location":"frontmatter/#example-use-frontmatter-variables-in-your-markdown","title":"Example: Use frontmatter variables in your Markdown","text":"<p>This page has the following frontmatter:</p> <pre><code>title: Frontmatter\ndescription: How to display YAML frontmatter in an MkDocs site.\ndocsLink: https://mkdocs-macros-plugin.readthedocs.io/en/latest/pages/#in-the-yaml-header-of-the-page\ntags:\n- mkdocs\n- jinja2\n- examples\n</code></pre> <p>It then uses that frontmatter to create the title and introduction:</p> <pre><code># {{ title }}\n{{ description }}\n\n[Relevant plugin docs]({{ docsLink }})\n\nList of tags:\n{% for tag in tags %}\n* {{ tag }}\n{% endfor %}\n</code></pre>","tags":["mkdocs","jinja2","examples"]},{"location":"import-macro/","title":"Macros for templating","text":"<p>Macros are useful when you want reusable styling, structure, and so on.</p>"},{"location":"import-macro/#example-use-a-macro-and-yaml-file-to-generate-a-custom-styled-list","title":"Example: Use a macro and YAML file to generate a custom-styled list","text":"<p>This example uses the YAML in <code>_yaml/large-example.yml</code>. Refer to External YAML files for guidance on including YAML files.</p>"},{"location":"import-macro/#code","title":"Code","text":"<p>Create an HTML file containing your macro:</p> <pre><code>{% macro prettyList(color, name, sweetness) %}\n  &lt;li class=\"{{ color }}\"&gt;{{ name }} : {{ sweetness }}&lt;/li&gt;\n{% endmacro %}\n</code></pre> <p>Add some custom CSS:</p> <pre><code>.green {\ncolor: green;\n}\n.orange {\ncolor: orange;\n}\n.yellow {\ncolor: yellow\n}\n</code></pre> <p>Refer to MkDocs - extra_css for more information on custom CSS with MkDocs.</p> <p>Import the macro and iterate over the YAML:</p> <pre><code>{% import \"_macros/pretty-list.html\" as list %}\n&lt;ul&gt;\n{% for fruit in fruits %}\n{{ list.prettyList(fruit.color, fruit.name, fruit.sweetness) }}\n{% endfor %}\n&lt;/ul&gt;\n</code></pre> <p>Refer to the Jinja2 Import documentation for more information about <code>import</code>.</p> <p>Nunjucks and Jinja2</p> <p>The Jinja2 documentation is sometimes hard to browse. Nunjucks is a JavaScript port of Jinja2. The documentation contents are similar, but better presented, and occasionally contain more detail. Nunjucks Templating docs. </p> <p>You can also search for solutions in either templating language if you're looking for examples of how to do something.</p>"},{"location":"import-macro/#output","title":"Output","text":"<ul> <li>apple : 4/10</li> <li>orange : 6/10</li> <li>melon : 8/10</li> </ul>"},{"location":"macros-info/","title":"List available variables","text":"<p>You can list all variables currently available by adding <code>{{ macros_info() }}</code> to a page in your site. This is a good way to test if the plugin is working.</p> <p>Here is the output for this site:</p>"},{"location":"macros-info/#macros-plugin-environment","title":"Macros Plugin Environment","text":""},{"location":"macros-info/#general-list","title":"General List","text":"<p>All available variables and filters within the macros plugin:</p> Variable Type Content extra dict extraValueOne = 1, extraValueTwo = 'two' config MkDocsConfig {'config_file_path': 'C:\\\\Users\\\\debor\\\\Desktop\\\\code\\\\mkdocs-macros-yaml-examples\\\\mkdocs.yml', 'site_name': 'MkDocs Macros YAML Examples', 'nav': [{'Home': 'index.md'}, {'Setup': [{'Clone and run': 'clone-run.md'}, {'Avoid clashing with code examples': 'clashing-code.md'}, {'List available variables': 'macros-info.md'}]}, {'YAML sources': [{'Frontmatter': 'frontmatter.md'}, {'MkDocs file': 'mkdocs-file.md'}, {'External YAML files': 'external-yaml-files.md'}]}, {'Display YAML content': [{'Rows in a table': 'rows-table.md'}, {'Using macros': 'import-macro.md'}]}], 'pages': None, 'site_url': None, 'site_description': 'An example site to demo using mkdocs-macros-plugin with YAML to generate content.', 'site_author': 'Deborah Barnard', 'theme': Theme(name='material', dirs=['C:\\\\Users\\\\debor\\\\Desktop\\\\code\\\\mkdocs-macros-yaml-examples\\\\venv\\\\lib\\\\site-packages\\\\material', 'C:\\\\Users\\\\debor\\\\Desktop\\\\code\\\\mkdocs-macros-yaml-examples\\\\venv\\\\lib\\\\site-packages\\\\mkdocs\\\\templates'], static_templates=['404.html', 'sitemap.xml'], name='material', locale=Locale(language='en', territory=''), language='en', direction=None, features=['navigation.sections'], palette={'primary': None, 'accent': None}, font={'text': 'Roboto', 'code': 'Roboto Mono'}, icon=None, favicon='assets/images/favicon.png'), 'docs_dir': 'C:\\\\Users\\\\debor\\\\Desktop\\\\code\\\\mkdocs-macros-yaml-examples\\\\src', 'site_dir': 'C:\\\\Users\\\\debor\\\\Desktop\\\\code\\\\mkdocs-macros-yaml-examples\\\\docs', 'copyright': None, 'google_analytics': None, 'dev_addr': _IpAddressValue(host='127.0.0.1', port=8000), 'use_directory_urls': True, 'repo_url': None, 'repo_name': None, 'edit_uri_template': None, 'edit_uri': None, 'extra_css': ['css/styles.css'], 'extra_javascript': [], 'extra_templates': [], 'markdown_extensions': ['toc', 'tables', 'fenced_code', 'admonition', 'pymdownx.details', 'pymdownx.highlight', 'pymdownx.inlinehilite', 'pymdownx.snippets', 'pymdownx.superfences'], 'mdx_configs': {'pymdownx.highlight': {'anchor_linenums': True}}, 'strict': False, 'remote_branch': 'gh-pages', 'remote_name': 'origin', 'extra': {'extraValueOne': 1, 'extraValueTwo': 'two'}, 'plugins': {'material/search': , 'macros': }, 'hooks': {}, 'watch': []} simpleYamlOne int 1 simpleYamlTwo str 'two' fruits list [{'name': 'apple', 'color': 'green', 'sweetness': '4/10'}, {'name': 'orange', 'color': 'orange', 'sweetness': '6/10'}, {'name': 'melon', 'color': 'yellow', 'sweetness': '8/10'}] environment dict system = 'Windows', system_version = '10', python_version = '3.10.2', mkdocs_version = '1.4.2', macros_plugin_version = '0.7.0', jinja2_version = '3.1.2' plugin LegacyConfig {'module_name': 'main', 'modules': [], 'include_dir': '', 'include_yaml': ['_yaml/simple-example.yml', '_yaml/large-example.yml'], 'j2_block_start_string': '', 'j2_block_end_string': '', 'j2_variable_start_string': '', 'j2_variable_end_string': '', 'on_undefined': 'keep', 'on_error_fail': False, 'verbose': False} git dict status = True, date [datetime], short_commit = '7d31543', commit = '7d31543f73f06fae4dfffc908ea650058ecef912', tag = '', author = 'StarfallProjects', author_email = 'starfallprojects@gmail.com', committer = 'StarfallProjects', committer_email = 'starfallprojects@gmail.com', date_ISO = 'Fri Jan 20 19:03:45 2023 +0000', message = 'extra css', raw = 'commit 7d31543f73f06fae4dfffc908ea650058ecef912\\nAuthor: StarfallProjects \\nDate:   Fri Jan 20 19:03:45 2023 +0000\\n\\n    extra css', root_dir = 'C:/Users/debor/Desktop/code/mkdocs-macros-yaml-examples' extraValueOne int 1 extraValueTwo str 'two' macros SuperDict context [function], macros_info [function], now [function], fix_url [function] filters dict pretty [function] filters_builtin dict abs [builtin_function_or_method], attr [function], batch [function], capitalize [function], center [function], count [builtin_function_or_method], d [function], default [function], dictsort [function], e [builtin_function_or_method], escape [builtin_function_or_method], filesizeformat [function], first [function], float [function], forceescape [function], format [function], groupby [function], indent [function], int [function], join [function], last [function], length [builtin_function_or_method], list [function], lower [function], items [function], map [function], min [function], max [function], pprint [function], random [function], reject [function], rejectattr [function], replace [function], reverse [function], round [function], safe [function], select [function], selectattr [function], slice [function], sort [function], string [builtin_function_or_method], striptags [function], sum [function], title [function], trim [function], truncate [function], unique [function], upper [function], urlencode [function], urlize [function], wordcount [function], wordwrap [function], xmlattr [function], tojson [function] navigation Navigation Page(title='Home', url='./')Section(title='Setup')    Page(title='Clone and run', url='clone-run/')    Page(title='Avoid clashing with code examples', url='clashing-code/')    Page(title='List available variables', url='macros-info/')Section(title='YAML sources')    Page(title='Frontmatter', url='frontmatter/')    Page(title='MkDocs file', url='mkdocs-file/')    Page(title='External YAML files', url='external-yaml-files/')Section(title='Display YAML content')    Page(title='Rows in a table', url='rows-table/')    Page(title='Using macros', url='import-macro/') files Files page Page Page(title='List available variables', url='macros-info/')"},{"location":"macros-info/#config-information","title":"Config Information","text":"<p>Standard MkDocs configuration information. Do not try to modify.</p> <p>e.g. <code>{{ config.docs_dir }}</code></p> <p>See also the MkDocs documentation on the config object.</p> Variable Type Content config_file_path str 'C:\\\\Users\\\\debor\\\\Desktop\\\\code\\\\mkdocs-macros-yaml-examples\\\\mkdocs.yml' site_name str 'MkDocs Macros YAML Examples' nav list [{'Home': 'index.md'}, {'Setup': [{'Clone and run': 'clone-run.md'}, {'Avoid clashing with code examples': 'clashing-code.md'}, {'List available variables': 'macros-info.md'}]}, {'YAML sources': [{'Frontmatter': 'frontmatter.md'}, {'MkDocs file': 'mkdocs-file.md'}, {'External YAML files': 'external-yaml-files.md'}]}, {'Display YAML content': [{'Rows in a table': 'rows-table.md'}, {'Using macros': 'import-macro.md'}]}] pages NoneType None site_url NoneType None site_description str 'An example site to demo using mkdocs-macros-plugin with YAML to generate content.' site_author str 'Deborah Barnard' theme Theme Theme(name='material', dirs=['C:\\\\Users\\\\debor\\\\Desktop\\\\code\\\\mkdocs-macros-yaml-examples\\\\venv\\\\lib\\\\site-packages\\\\material', 'C:\\\\Users\\\\debor\\\\Desktop\\\\code\\\\mkdocs-macros-yaml-examples\\\\venv\\\\lib\\\\site-packages\\\\mkdocs\\\\templates'], static_templates=['404.html', 'sitemap.xml'], name='material', locale=Locale(language='en', territory=''), language='en', direction=None, features=['navigation.sections'], palette={'primary': None, 'accent': None}, font={'text': 'Roboto', 'code': 'Roboto Mono'}, icon=None, favicon='assets/images/favicon.png') docs_dir str 'C:\\\\Users\\\\debor\\\\Desktop\\\\code\\\\mkdocs-macros-yaml-examples\\\\src' site_dir str 'C:\\\\Users\\\\debor\\\\Desktop\\\\code\\\\mkdocs-macros-yaml-examples\\\\docs' copyright NoneType None google_analytics NoneType None dev_addr _IpAddressValue _IpAddressValue(host='127.0.0.1', port=8000) use_directory_urls bool True repo_url NoneType None repo_name NoneType None edit_uri_template NoneType None edit_uri NoneType None extra_css list ['css/styles.css'] extra_javascript list [] extra_templates list [] markdown_extensions list ['toc', 'tables', 'fenced_code', 'admonition', 'pymdownx.details', 'pymdownx.highlight', 'pymdownx.inlinehilite', 'pymdownx.snippets', 'pymdownx.superfences'] mdx_configs dict pymdownx.highlight [dict] strict bool False remote_branch str 'gh-pages' remote_name str 'origin' extra LegacyConfig {'extraValueOne': 1, 'extraValueTwo': 'two'} plugins PluginCollection material/search [SearchPlugin], macros [MacrosPlugin] hooks dict watch list []"},{"location":"macros-info/#macros","title":"Macros","text":"<p>These macros have been defined programmatically for this environment (module or pluglets). </p> Variable Type Content context function (obj, e) <p>Default mkdocs_macro List the defined variables</p> macros_info function () <p>Test/debug function:         list useful documentation on the mkdocs_macro environment.</p> now function () <p>Get the current time (returns a datetime object).          Used alone, it provides a timestamp.         To get the year use <code>now().year</code>, for the month number          <code>now().month</code>, etc.</p> fix_url function (url, r) <p>If url is relative, fix it so that it points to the docs diretory.     This is necessary because relative links in markdown must be adapted     in html ('img/foo.png' =&gt; '../img/img.png').</p>"},{"location":"macros-info/#git-information","title":"Git Information","text":"<p>Information available on the last commit and the git repository containing the documentation project:</p> <p>e.g. <code>{{ git.message }}</code></p> Variable Type Content status bool True date datetime datetime.datetime(2023, 1, 20, 19, 3, 45, tzinfo=tzutc()) short_commit str '7d31543' commit str '7d31543f73f06fae4dfffc908ea650058ecef912' tag str '' author str 'StarfallProjects' author_email str 'starfallprojects@gmail.com' committer str 'StarfallProjects' committer_email str 'starfallprojects@gmail.com' date_ISO str 'Fri Jan 20 19:03:45 2023 +0000' message str 'extra css' raw str 'commit 7d31543f73f06fae4dfffc908ea650058ecef912\\nAuthor: StarfallProjects \\nDate:   Fri Jan 20 19:03:45 2023 +0000\\n\\n    extra css' root_dir str 'C:/Users/debor/Desktop/code/mkdocs-macros-yaml-examples'"},{"location":"macros-info/#page-attributes","title":"Page Attributes","text":"<p>Provided by MkDocs. These attributes change for every page (the attributes shown are for this page).</p> <p>e.g. <code>{{ page.title }}</code></p> <p>See also the MkDocs documentation on the page object.</p> Variable Type Content file File page [Page], src_uri = 'macros-info.md', abs_src_path = 'C:\\\\Users\\\\debor\\\\Desktop\\\\code\\\\mkdocs-macros-yaml-examples\\\\src\\\\macros-info.md', name = 'macros-info', dest_uri = 'macros-info/index.html', abs_dest_path = 'C:\\\\Users\\\\debor\\\\Desktop\\\\code\\\\mkdocs-macros-yaml-examples\\\\docs\\\\macros-info\\\\index.html', url = 'macros-info/' title str 'List available variables' parent Section title = 'Setup', children = [Page(title='Clone and run', url='clone-run/'), Page(title='Avoid clashing with code examples', url='clashing-code/'), Page(title='List available variables', url='macros-info/')], parent [NoneType], _Section__active = False children NoneType None previous_page Page Page(title='Avoid clashing with code examples', url='clashing-code/') next_page Page Page(title='Frontmatter', url='frontmatter/') _Page__active bool False update_date str '2023-01-20' canonical_url NoneType None abs_url NoneType None edit_url NoneType None markdown str '# List available variables\\n\\nYou can list all variables currently available by adding {% raw %}`{{ macros_info() }}`{% endraw %} to a page in your site. This is a good way to test if the plugin is working.\\n\\nHere is the output for this site:\\n\\n{{ macros_info() }}' content NoneType None toc list [] meta dict <p>To have all titles of all pages, use:</p> <pre><code>{% for page in navigation.pages %}\n- {{ page.title }}\n{% endfor %}\n</code></pre>"},{"location":"macros-info/#plugin-filters","title":"Plugin Filters","text":"<p>These filters are provided as a standard by the macros plugin.</p> Variable Type Content pretty function (var_list, rows, header, e) <p>Default mkdocs_macro Prettify a dictionary or object          (used for environment documentation, or debugging).</p>"},{"location":"macros-info/#builtin-jinja2-filters","title":"Builtin Jinja2 Filters","text":"<p>These filters are provided by Jinja2 as a standard.</p> <p>See also the Jinja2 documentation on builtin filters).</p> Variable Type Content abs builtin_function_or_method <p>Return the absolute value of the argument.</p> attr function (environment, obj, name, value) <p>Get an attribute of an object.  <code>foo|attr(\"bar\")</code> works like     <code>foo.bar</code> just that always an attribute is returned and items are not     looked up.</p> batch function (value, linecount, fill_with, tmp, item) <p>A filter that batches items. It works pretty much like <code>slice</code>     just the other way round. It returns a list of lists with the     given number of items. If you provide a second parameter this     is used to fill up missing items. See this example.</p> capitalize function (s) <p>Capitalize a value. The first character will be uppercase, all others     lowercase.</p> center function (value, width) <p>Centers the value in a field of a given width.</p> count builtin_function_or_method <p>Return the number of items in a container.</p> d function (value, default_value, boolean) <p>If the value is undefined it will return the passed default value,     otherwise the value of the variable.</p> default function (value, default_value, boolean) <p>If the value is undefined it will return the passed default value,     otherwise the value of the variable.</p> dictsort function (value, case_sensitive, by, reverse, sort_func) <p>Sort a dict and yield (key, value) pairs. Python dicts may not     be in the order you want to display them in, so sort them first.</p> e builtin_function_or_method <p>Replace the characters <code>&amp;</code>, <code>&lt;</code>, <code>&gt;</code>, <code>'</code>, and <code>\"</code> in the string with HTML-safe sequences. Use this if you need to display text that might contain such characters in HTML.</p> escape builtin_function_or_method <p>Replace the characters <code>&amp;</code>, <code>&lt;</code>, <code>&gt;</code>, <code>'</code>, and <code>\"</code> in the string with HTML-safe sequences. Use this if you need to display text that might contain such characters in HTML.</p> filesizeformat function (value, binary, bytes, base, prefixes, i, prefix, unit) <p>Format the value like a 'human-readable' file size (i.e. 13 kB,     4.1 MB, 102 Bytes, etc).  Per default decimal prefixes are used (Mega,     Giga, etc.), if the second parameter is set to <code>True</code> the binary     prefixes are used (Mebi, Gibi).</p> first function (args, kwargs, b) <p>Return the first item of a sequence.</p> float function (value, default) <p>Convert the value into a floating point number. If the     conversion doesn't work it will return <code>0.0</code>. You can     override this default using the first parameter.</p> forceescape function (value) <p>Enforce HTML escaping.  This will probably double escape variables.</p> format function (value, args, kwargs) <p>Apply the given values to a <code>printf-style</code>_ format string, like     <code>string % values</code>.</p> groupby function (args, kwargs, b) <p>Group a sequence of objects by an attribute using Python's     :func:<code>itertools.groupby</code>. The attribute can use dot notation for     nested access, like <code>\"address.city\"</code>. Unlike Python's <code>groupby</code>,     the values are sorted first so only one group is returned for each     unique value.</p> indent function (s, width, first, blank, newline, rv, lines) <p>Return a copy of the string with each line indented by 4 spaces. The     first line and blank lines are not indented by default.</p> int function (value, default, base) <p>Convert the value into an integer. If the     conversion doesn't work it will return <code>0</code>. You can     override this default using the first parameter. You     can also override the default base (10) in the second     parameter, which handles input with prefixes such as     0b, 0o and 0x for bases 2, 8 and 16 respectively.     The base is ignored for decimal numbers and non-string values.</p> join function (args, kwargs, b) <p>Return a string which is the concatenation of the strings in the     sequence. The separator between elements is an empty string per     default, you can define it with the optional parameter.</p> last function (environment, seq) <p>Return the last item of a sequence.</p> length builtin_function_or_method <p>Return the number of items in a container.</p> list function (args, kwargs, b) <p>Convert the value into a list.  If it was a string the returned list     will be a list of characters.</p> lower function (s) <p>Convert a value to lowercase.</p> items function (value) <p>Return an iterator over the <code>(key, value)</code> items of a mapping.</p> map function (args, kwargs, b) <p>Applies a filter on a sequence of objects or looks up an attribute.     This is useful when dealing with lists of objects but you are really     only interested in a certain value of it.</p> min function (environment, value, case_sensitive, attribute) <p>Return the smallest item from the sequence.</p> max function (environment, value, case_sensitive, attribute) <p>Return the largest item from the sequence.</p> pprint function (value) <p>Pretty print a variable. Useful for debugging.</p> random function (context, seq) <p>Return a random item from the sequence.</p> reject function (args, kwargs, b) <p>Filters a sequence of objects by applying a test to each object,     and rejecting the objects with the test succeeding.</p> rejectattr function (args, kwargs, b) <p>Filters a sequence of objects by applying a test to the specified     attribute of each object, and rejecting the objects with the test     succeeding.</p> replace function (eval_ctx, s, old, new, count) <p>Return a copy of the value with all occurrences of a substring     replaced with a new one. The first argument is the substring     that should be replaced, the second is the replacement string.     If the optional third argument <code>count</code> is given, only the first     <code>count</code> occurrences are replaced.</p> reverse function (value, rv, e) <p>Reverse the object or return an iterator that iterates over it the other     way round.</p> round function (value, precision, method, func) <p>Round the number to a given precision. The first     parameter specifies the precision (default is <code>0</code>), the     second the rounding method.</p> safe function (value) <p>Mark the value as safe which means that in an environment with automatic     escaping enabled this variable will not be escaped.</p> select function (args, kwargs, b) <p>Filters a sequence of objects by applying a test to each object,     and only selecting the objects with the test succeeding.</p> selectattr function (args, kwargs, b) <p>Filters a sequence of objects by applying a test to the specified     attribute of each object, and only selecting the objects with the     test succeeding.</p> slice function (args, kwargs, b) <p>Slice an iterator and return a list of lists containing     those items. Useful if you want to create a div containing     three ul tags that represent columns.</p> sort function (environment, value, reverse, case_sensitive, attribute, key_func) <p>Sort an iterable using Python's :func:<code>sorted</code>.</p> string builtin_function_or_method <p>Convert an object to a string if it isn't already. This preserves a :class:<code>Markup</code> string rather than converting it back to a basic string, so it will still be marked as safe and won't be escaped again.</p> striptags function (value) <p>Strip SGML/XML tags and replace adjacent whitespace by one space.</p> sum function (args, kwargs, b) <p>Returns the sum of a sequence of numbers plus the value of parameter     'start' (which defaults to 0).  When the sequence is empty it returns     start.</p> title function (s) <p>Return a titlecased version of the value. I.e. words will start with     uppercase letters, all remaining characters are lowercase.</p> trim function (value, chars) <p>Strip leading and trailing characters, by default whitespace.</p> truncate function (env, s, length, killwords, end, leeway, result) <p>Return a truncated copy of the string. The length is specified     with the first parameter which defaults to <code>255</code>. If the second     parameter is <code>true</code> the filter will cut the text at length. Otherwise     it will discard the last word. If the text was in fact     truncated it will append an ellipsis sign (<code>\"...\"</code>). If you want a     different ellipsis sign than <code>\"...\"</code> you can specify it using the     third parameter. Strings that only exceed the length by the tolerance     margin given in the fourth parameter will not be truncated.</p> unique function (environment, value, case_sensitive, attribute, getter, seen, item, key) <p>Returns a list of unique items from the given iterable.</p> upper function (s) <p>Convert a value to uppercase.</p> urlencode function (value, items) <p>Quote data for use in a URL path or query using UTF-8.</p> urlize function (eval_ctx, value, trim_url_limit, nofollow, target, rel, extra_schemes, policies, rel_parts, scheme, rv) <p>Convert URLs in text into clickable links.</p> wordcount function (s) <p>Count the words in that string.</p> wordwrap function (environment, s, width, break_long_words, wrapstring, break_on_hyphens) <p>Wrap a string to the given width. Existing newlines are treated     as paragraphs to be wrapped separately.</p> xmlattr function (eval_ctx, d, autospace, rv) <p>Create an SGML/XML attribute string based on the items in a dict.     All values that are neither <code>none</code> nor <code>undefined</code> are automatically     escaped.</p> tojson function (eval_ctx, value, indent, policies, dumps, kwargs) <p>Serialize an object to a string of JSON, and mark it safe to     render in HTML. This filter is only for use in HTML documents.</p>"},{"location":"mkdocs-file/","title":"MkDocs file","text":"<p>mkdocs-macros-plugin automatically has access to everything in your <code>mkdocs.yml</code> file.</p>"},{"location":"mkdocs-file/#example-access-your-mkdocs-configuration-using-config","title":"Example: Access your MkDocs configuration using <code>config</code>","text":"<p>mkdocs-macros-plugin comes with seven built-in objects. <code>config</code> contains the MkDocs configuration. </p>"},{"location":"mkdocs-file/#code","title":"Code","text":"<pre><code># In mkdocs.yml\nsite_name: MkDocs Macros YAML Examples\n# In your Markdown\n{{ config.site_name }}\n</code></pre>"},{"location":"mkdocs-file/#output","title":"Output","text":"<p>MkDocs Macros YAML Examples</p>"},{"location":"mkdocs-file/#example-add-custom-variables-using-extra","title":"Example: Add custom variables using <code>extra</code>","text":"<p>You can make custom variables available using the <code>extra</code> object in your <code>mkdocs.yml</code>.</p>"},{"location":"mkdocs-file/#code_1","title":"Code","text":"<pre><code># In mkdocs.yml\nextra:\nextraValueOne: 1\nextraValueTwo: two\n# In your Markdown\n* Value 1: {{ extraValueOne }}\n* Value 2: {{ extraValueTwo }}\n</code></pre>"},{"location":"mkdocs-file/#output_1","title":"Output","text":"<ul> <li>Value 1: 1</li> <li>Value 2: two</li> </ul>"},{"location":"rows-table/","title":"As rows in a table","text":"<p>This example uses the YAML in <code>_yaml/large-example.yml</code>. Refer to External YAML files for guidance on including YAML files.</p>"},{"location":"rows-table/#code","title":"Code","text":"<pre><code>| Name | Color | Sweetness |\n| ---- | ------ | --------- |\n{% for fruit in fruits %}| {{ fruit.name }} | {{ fruit.color }} | {{ fruit.sweetness }} |\n{% endfor %}\n</code></pre>"},{"location":"rows-table/#output","title":"Output","text":"Name Color Sweetness apple green 4/10 orange orange 6/10 melon yellow 8/10 <p>Note the positioning of the <code>for</code> syntax in the code example. This is deliberate. The following don't work:</p> <pre><code>| Name | Color | Sweetness |\n| ---- | ------ | --------- |\n{% for fruit in fruits %}\n| {{ fruit.name }} | {{ fruit.color }} | {{ fruit.sweetness }} |\n{% endfor %}\n\n| Name | Colour | Sweetness |\n| ---- | ------ | --------- |\n{% for fruit in fruits %}| {{ fruit.name }} | {{ fruit.colour }} | {{ fruit.sweetness }} |{% endfor %}\n</code></pre>"}]}